se <- sd(samp)/sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
#de onde vem o 1,96?
qnorm(0.975, mean = 0, sd = 1, lower.tail = T)
#de onde vem o 1,96?
qnorm(0.975, mean = 0, sd = 1, lower.tail = T)
qnorm(0.975)
#Exerc?cio 3
#Para o intervalos de confian?a ser v?lido, a m?dia amostral precisa ter distribui??o normal e ter um erro padr?o igual a s/raiz(n).
#Quais condi??es precisam ser atendidas para isso ser verdadeiro?
# R. dados originais com distribui??o normal ou
# tamanho de amostra grande para uso do TCL (n>30)
hist(population)
qqnorm(population)
qqline(population)
#m?dia da popula??o
mean(population)
#primeiro criar os vetores vazios de m?dias e desvios e depois fazemos o loop
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obt?m uma amostra de n = 60 elementos da popula??o
samp_mean[i] <- mean(samp) # salva a m?dia amostral no i-?simo elemento de samp_mean
samp_sd[i] <- sd(samp) # salva o dp da amostra como o i-?simo elemento de samp_sd
}
#constru?mos os intervalos de confian?a.
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
#Vamos visualizar o primeiro intervalo.
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population)) # três linhas vermelhas no gráfico gerado
3/50 # 94% < 95%
x <- (99/100) # confiança desejada 95%
y <- (1-x)/2 # area desejada em cada ponta da cauda
1-y # parâmetro para a função qnorm
qnorm(1-y, mean = 0, sd = 1, lower.tail = T)
qnorm(1-y)
# transformando em função
valorCritico <- function (confianca)  {
x <- (confianca/100) # confiança desejada 95%
y <- (1-x)/2 # area desejada em cada ponta da cauda
1-y # parâmetro para a função qnorm
qnorm(1-y, mean = 0, sd = 1, lower.tail = T)
qnorm(1-y) # valor crítico
}
valorCritico(95)
# aplicando a forma para 97% de confiança
valorCritico(97) # 2.17009
lower_vector <- samp_mean - valorCritico(97) * samp_sd / sqrt(n)
upper_vector <- samp_mean + valorCritico(97) * samp_sd / sqrt(n)
c(lower_vector[1],upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population)) # gráfico apresentou 1 linha vermelha
plot_ci(lower_vector, upper_vector, mean(population)) # gráfico apresentou 1 linha vermelha
1 - 1/50 # 98% > 97% (confiança desejada)
plot_ci(lower_vector, upper_vector, mean(population)) # gráfico apresentou 1 linha vermelha
1 - 1/50 # 98% > 97% (confiança desejada)
desvio_padrao <- 5
media <- 50
desvio_padrao <- 5
pnorm(25.2, mean = media, sd = desvio_padrao, lower.tail = T)
pnorm(24.8, mean = media, sd = desvio_padrao, lower.tail = T)
x <- pnorm(25.2, mean = media, sd = desvio_padrao, lower.tail = T)
y <- pnorm(24.8, mean = media, sd = desvio_padrao, lower.tail = T)
x-y
media <- 25
desvio_padrao <- 5
x <- pnorm(25.2, mean = media, sd = desvio_padrao, lower.tail = T)
y <- pnorm(24.8, mean = media, sd = desvio_padrao, lower.tail = T)
x-y
1-(x-y)
desvio_padrao <- sqrt(variancia)
tamanho <- 400
z <- 0.2
variancia <- 25
desvio_padrao <- sqrt(variancia)
erro_padrao <- desvio_padrao / sqrt(tamanho)
valor_critico <- z_calculado / erro_padrao
tamanho <- 400
z_calculado <- 0.2
variancia <- 25
desvio_padrao <- sqrt(variancia)
erro_padrao <- desvio_padrao / sqrt(tamanho)
valor_critico <- z_calculado / erro_padrao
prob <- 1 - 2 * pnorm(valor_critico, 0, 1, lower.tail = F)
prob
desvio_padrao <- sqrt(variancia)
limite_superior <- media * 3.25 * desvio_padrao / sqrt(tamanho)
limite_superior
# a) limite superior para intervalo de confiança 99%
tamanho <- 10
media <- 345
variancia <- 100
desvio_padrao <- sqrt(variancia)
limite_superior <- media * 3.25 * desvio_padrao / sqrt(tamanho)
limite_superior
# a) limite superior para intervalo de confiança 99%
tamanho <- 15
media <- 345
variancia <- 100
desvio_padrao <- sqrt(variancia)
limite_superior <- media * 3.25 * desvio_padrao / sqrt(tamanho)
limite_superior
# a) limite superior para intervalo de confiança 99%
tamanho <- 15
media <- 345
variancia <- 100
desvio_padrao <- sqrt(variancia)
limite_superior <- media + 3.25 * desvio_padrao / sqrt(tamanho)
limite_superior
# b) amplitude do intervalo bilateral de confiança de 90%
# calcular z
qt(0.995, df)
# b) amplitude do intervalo bilateral de confiança de 90%
# calcular z
qt(0.995, tamanho - 1)
# b) amplitude do intervalo bilateral de confiança de 90%
# calcular z
qt(0.995, 10 - 1)
# b) amplitude do intervalo bilateral de confiança de 90%
# calcular z
qt(0.995, tamanho - 1)
qt(0.995, tamanho - 1)
limite_superior <- media + 2.976843 * desvio_padrao / sqrt(tamanho)
limite_superior
limite_superior
1/100/2
1- 1/100/2
# b) amplitude do intervalo bilateral de confiança de 90%
# calcular z
1- 10/100/2
# b) amplitude do intervalo bilateral de confiança de 90%
# calcular z
1- 10/100/2
qt(0.95, tamanho - 1) # 2.976843
# b) amplitude do intervalo bilateral de confiança de 90%
# calcular z
1- 10/100/2 # 0.95
qt(0.95, tamanho - 1) #  1.76131
amplitude <- 2 * 1.76131 * desvio_padrao / sqrt(tamanho)
amplitude
# c) tamamnho da amostra para intervalo de confiança de 90% apresentasse amplitude de no máximo 5 unidades
amplitude <- 5
sqrt(tamanho) <- 2 * 1.76131 * desvio_padrao / amplitude
tamanho <- (2 * 1.76131 * desvio_padrao / amplitude)^2
tamanho
# c) tamamnho da amostra para intervalo de confiança de 90% apresentasse amplitude de no máximo 5 unidades
amplitude <- 5
tamanho <- (2 * 1.76131 * desvio_padrao / amplitude)^2
tamanho
test_antes <- c(128, 128, 126, 118, 128, 120)
test_depois <- c(120,	120,	130,	114,	120,	116)
t.test(test_antes, test_depois, paired=T, alternative="greater")
qt(0.95, tamanho - 1) #  1.76131
intervalo_confianca <- 99/100
p <- 1/2
desvio <- 0.045
z <- 2.57 # 99%
n <- (z/desvio)^2 * p * (1 - p)
n
p <- 0.15
desvio <- 0.045
z <- 2.57 # 99%
n <- (z/desvio)^2 * p * (1 - p)
n
teste_pro <- c(30, 40, 45, 26, 37, 33, 33, 28)
teste_apt <- c(18, 19, 22, 16, 25, 22, 21, 20)
modelo <- lm(teste_pro ~ teste_apt)
summary(modelo)
# ExercÃ­cio 4 Ajuste um novo modelo que utilize a variÃ¡vel homeruns para
# predizer runs (pontos). Utilizando as estimativas dos resultados do R,
# escreva a equaÃ§Ã£o da linha de regressÃ£o. O que a inclinaÃ§Ã£o (coef. angular)
# nos diz sobre a relaÃ§Ã£o entre o sucesso de um time e seus home runs?
plot(mlb11$homeruns, mlb11$runs)
cor(mlb11$runs, mlb11$homeruns)
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
summary(modelo)
# c.
apt <- 20
pro <- 8.283 + 1.262 * apt
pro
# d.
# pro <- 8.283 + 1.262 * apt
pro <- 44
apt <- (pro - 8.283) / 1.262
apt
library(readr)
bikeClean <- read.csv("bikeCleaned.csv",stringsAsFactors=TRUE)
setwd("C:/Dev/github/data-science-ufrgs/CD002-mineracao-dados/04-estudo-preprocessamento")
bikeClean <- read.csv("bikeCleaned.csv",stringsAsFactors=TRUE)
View(bikeClean)
str(bikeClean)
summary(bikeClean)
library(readr)
bikeClean <- read.csv("bikeCleaned.csv",stringsAsFactors=TRUE)
View(bikeClean)
str(bikeClean)
summary(bikeClean)
library(arules)
rules.all <- apriori(bikeClean, control = list(verbose=F),
parameter = list(minlen=2, maxlen=4, supp=0.05, conf=0.6),
appearance = list(rhs=c("naMedia=Yes","naMedia=No"), default="lhs"))
quality(rules.all) <- round(quality(rules.all), digits=3)
rules.sorted <- sort(rules.all, by="lift")
inspect(rules.sorted)
subset.matrix <- is.subset(rules.sorted, rules.sorted, sparse = FALSE)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
# Ler dados brutos, entenda seu conteudo e estrutura do dataframe, e tire estatÃ­sticas
bike <- read.csv("raw_bikeshare_data.csv")
View(bike)
summary(bike)
str(bike)
# Encontrando e consertando problemas
# Valores nulos
# numero de valores nulos na tabela - nao interessa o atributo/registro
# em numero absoluto ou proporcoes
table(is.na(bike))
prop.table(table(is.na(bike))) * 100
#total de registros com valores nulos por atributo
colSums(is.na(bike))
#substituindo os valores nulos (NA) por um valor padrao (desconhecido)
na_loc <- is.na(bike$sources)
bike$sources[na_loc] <- "desconhecido"
colSums(is.na(bike))
## padronizando os valores do atributo sources
## verificar os valores unicos
unique(bike$sources)
#padronizando os valores: conversÃ£o para caixa baixa, remocao de espacos em branco
library(dplyr)
library(stringr)
bike$sources <- tolower(bike$sources)
bike$sources <- str_trim(bike$sources)
unique(bike$sources)
#abstraindo os diferentes sites para source "web"
library(DataCombine)
web_sites <- "(www.[a-z]*.[a-z]*)"
current <- unique(str_subset(bike$sources, web_sites))
replace <- rep("web", length(current))
replacements <- data.frame(from = current, to = replace)
bike <- FindReplace(data = bike, Var = "sources", replacements,
from = "from", to = "to", exact = FALSE)
unique(bike$sources)
str(bike)
summary(bike)
# transformando em dados categÃ³ricos
bike$sources <- as.factor(bike$sources)
str(bike)
summary(bike)
#transformando o tipo das demais variaveis (continuas, char)
# para valores categÃ³ricos, colocando nomes mais representativos
bike$humidity <- as.numeric(bike$humidity)
bike$holiday <- factor(bike$holiday, levels = c(0, 1),
labels = c("nao", "sim"))
bike$workingday <- factor(bike$workingday, levels = c(0, 1),
labels = c("nao", "sim"))
bike$season <- factor(bike$season, levels = c(1, 2, 3, 4),
labels = c("primavera", "verao",
"outono", "inverno"),
ordered = TRUE )
bike$weather <- factor(bike$weather, levels = c(1, 2, 3, 4),
labels = c("claro",
"nublado",
"garoando",
"chuvoso"),
ordered = TRUE )
str(bike)
summary(bike)
# plotando valores para escolher algumas variaveis relevantes
plot(bike$weather, main="Histograma - Distribuicao dos usuarios por tempo",
xlab="Tempo", ylab="Total usuarios",
ylim=c(0,13000), las=0)
plot(bike$workingday, main="Histograma - Distribuicao dos usuarios por Dia Ãtil",
xlab="Dia Util", ylab="Total usuarios",
ylim=c(0,13000), las=0)
plot(bike$holiday, main="Histograma - Distribuicao dos usuarios por Feriado",
xlab="Feriado", ylab="Total usuarios",
ylim=c(0,17000), las=0)
plot(bike$season, main="Histograma - Distribuicao dos usuarios por EstaÃ§Ã£o do Ano",
xlab="Feriado", ylab="Total usuarios",
ylim=c(0,5000), las=0)
plot(bike$holiday, main="Histograma - Distribuicao dos usuarios por Feriado",
xlab="Feriado", ylab="Total usuarios",
ylim=c(0,17000), las=0)
plot(bike$workingday, main="Histograma - Distribuicao dos usuarios por Dia Ãtil",
xlab="Dia Util", ylab="Total usuarios",
ylim=c(0,13000), las=0)
# plotando valores para escolher algumas variaveis relevantes
plot(bike$weather, main="Histograma - Distribuicao dos usuarios por tempo",
xlab="Tempo", ylab="Total usuarios",
ylim=c(0,13000), las=0)
plot(bike$holiday, main="Histograma - Distribuicao dos usuarios por Feriado",
xlab="Feriado", ylab="Total usuarios",
ylim=c(0,17000), las=0)
plot(bike$season, main="Histograma - Distribuicao dos usuarios por EstaÃ§Ã£o do Ano",
xlab="Feriado", ylab="Total usuarios",
ylim=c(0,5000), las=0)
plot(bike$holiday, main="Histograma - Distribuicao dos usuarios por Feriado",
xlab="Feriado", ylab="Total usuarios",
ylim=c(0,17000), las=0)
View(bike)
View(bike)
# plotando valores para escolher algumas variaveis relevantes
plot(bike$weather, main="Histograma - Distribuicao dos usuarios por tempo",
xlab="Tempo", ylab="Total usuarios",
ylim=c(0,13000), las=0)
plot(bike$workingday, main="Histograma - Distribuicao dos usuarios por Dia Ãtil",
xlab="Dia Util", ylab="Total usuarios",
ylim=c(0,13000), las=0)
plot(bike$holiday, main="Histograma - Distribuicao dos usuarios por Feriado",
xlab="Feriado", ylab="Total usuarios",
ylim=c(0,17000), las=0)
#selecionando as variaveis finais e trocando o nome das variaveis
bikeClean <- select(bike2, turno, sources, weather, season, workingday,naMedia)
bikeClean <- bikeClean %>% rename(estacao = season,
diaUtil = workingday,
clima = weather,
fontes = sources)
risco_calor <- function(atemp) {
if (atemp < 27) {
result <- "sem perigo"
}
else if (x < 32 ) {
result <- "cuidado"
}
else if (x < 56 ) {
result <- "perigo"
}
else {
result <- "perigo alto"
}
return(result)
}
risco_calor <- function(atemp) {
if (atemp < 27) {
result <- "sem perigo"
}
else if (atemp < 32 ) {
result <- "cuidado"
}
else if (atemp < 56 ) {
result <- "perigo"
}
else {
result <- "perigo alto"
}
return(result)
}
risco_calor(25)
risco_calor(27)
risco_calor(32)
bike["perigo_calor"]<-risco_calor(bike$atemp)
bike %>%
mutate(perigo_calor = risco_calor(atemp))
bike %>%
mutate(perigo_calor = risco_calor(atemp))
bike %>%
mutate(perigo_calor = case_when(atemp < 27 ~ "sem perigo"
, atemp < 32 ~ "cuidado"
, atemp < 56 ~ "perigo"
, TRUE ~ "perigo alto"))
View(bike)
str(bike)
summary(bike)
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike %>%
mutate(perigo_calor = case_when(atemp < 27 ~ "sem perigo"
, atemp < 32 ~ "cuidado"
, atemp < 56 ~ "perigo"
, TRUE ~ "perigo alto"))
bike %>%
mutate(perigo_calor = case_when(atemp < 27 ~ "sem perigo", atemp < 32 ~ "cuidado"
, atemp < 56 ~ "perigo"
, TRUE ~ "perigo alto"))
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike %>%
mutate(perigo_calor = case_when(atemp < 27 ~ "sem perigo", atemp < 32 ~ "cuidado"
, atemp < 56 ~ "perigo"
, TRUE ~ "perigo alto"))
bike %>%
mutate(perigo_calor = case_when(atemp < 27 ~ "teste", atemp < 32 ~ "cuidado"
, atemp < 56 ~ "perigo"
, TRUE ~ "perigo alto"))
bike %>%
mutate(perigo_calor = case_when(atemp < 27 ~ "sem perigo"))
bike %>%
mutate(perigo_calor = case_when(atemp < "perigo alto"))
bike %>%
mutate(perigo_calor = "perigo alto"))
bike %>%
mutate(perigo_calor = "perigo alto")
bike %>%
mutate(perigo_calor = case_when(atemp < 27 ~ "sem perigo"))
bike %>%
mutate(perigo_calor = case_when(atemp <= 27.0 ~ "sem perigo"))
bike %>%
mutate(perigo_calor = "perigo alto")
bike %>%
mutate(perigo_calor = case_when(atemp <= 27.0 ~ "sem perigo"))
bike %>%
mutate(perigo_calor = case_when(bike$atemp <= 27.0 ~ "sem perigo"))
bike %>%
mutate(perigo_calor = "perigo alto")
bike %>%
mutate(perigo_calor = case_when(bike$atemp <= 27.0 ~ "sem perigo"))
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike %>%
mutate(
perigo_calor = case_when(
atemp < 27  ~ "sem perigo",
atemp < "32"~ "cuidado",
TRUE ~  "perigo alto"
)
)
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike %>%
mutate(
perigo_calor = atemp
)
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike %>%
mutate(
perigo_calor = atemp
)
bike %>%
mutate(
perigo_calor <- atemp
)
View(bike)
bike %>%
mutate(
perigo_calor <- atemp
)
bike %>%
mutate(
perigo_calor = "teste"
)
View(bike)
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike %>%
mutate(perigo_calor = "perigo alto")
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike <- mutate(perigo_calor, "teste")
bike <- mutate(perigo_calor="teste")
bike %>%
mutate(perigo_calor = "perigo alto")
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike %>%
mutate(novo = "perigo alto")
View(bike)
bike <- mutate(novo="teste")
bike %>%
mutate(
perigo_calor = "teste"
)
bike <- bike %>%
mutate(
perigo_calor = "teste"
)
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike <- bike %>%
mutate(
perigo_calor = case_when(
atemp < 27  ~ "sem perigo",
atemp < "32"~ "cuidado",
TRUE ~  "perigo alto"
)
)
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
bike <- bike %>%
mutate(
perigo_calor = case_when(
atemp < 27  ~ "sem perigo",
atemp < "32"~ "cuidado",
atemp < "56"~ "perigo",
TRUE ~  "perigo alto"
)
)
bike$perigo_calor <- as.factor(bike$perigo_calor)
str(bike)
summary(bike)
plot(bike$perigo_calor, main="Histograma - Perigo calor",
xlab="Perigo Calor",
ylim=c(0,5000), las=0)
plot(bike$perigo_calor, main="Histograma - Perigo calor",
xlab="Perigo Calor",
ylim=c(0,11000), las=0)
